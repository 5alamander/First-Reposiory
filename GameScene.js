// Generated by CoffeeScript 1.8.0
(function() {
  var GameScene, Player, a, b, book, cards, gs, gsTest, magics, p1, p2, random, remove, root, servants, t, trigger,
    __slice = [].slice;

  book = require('./Card.coffee');

  cards = book.cards;

  servants = book.servants;

  magics = book.magics;

  trigger = book.trigger;

  random = function(n) {
    return Math.floor(Math.random() * n);
  };

  remove = function(list, n) {
    var t;
    t = list[n];
    list.splice(n, 1);
    return t;
  };

  Player = (function() {
    Player.energy = 1;

    Player.currentEnergy = 1;

    function Player(name, gs) {
      this.name = name;
      this.gs = gs;
      this.heroList = [];
      this.collectionList = [];
      this.handList = [];
      this.servantList = [];
    }

    Player.prototype.drawCard = function() {
      var t;
      t = remove(this.collectionList, random(this.collectionList.length));
      this.handList.push(t);
      return typeof t.onDraw === "function" ? t.onDraw() : void 0;
    };

    Player.prototype.turnStart = function() {
      var currentEnergy;
      if (energy < 10) {
        energy += 1;
      }
      return currentEnergy = energy;
    };

    Player.prototype.turnEnd = function() {};

    Player.prototype.useCard = function(handN, aimN) {};

    Player.prototype.toString = function() {};

    return Player;

  })();

  GameScene = {};

  GameScene.createGameScene = function() {
    var gs;
    gs = {};
    gs.attacker = new Player('attacker', gs);
    gs.defenser = new Player('defenser', gs);
    gs.attacker.enemy = gs.defenser;
    gs.defenser.enemy = gs.attacker;
    gs.turn = 0;
    gs.activePlayer = 0;
    gs.init = function(attackerCollection, defenserCollection) {
      var card, _i, _j, _len, _len1, _ref, _ref1, _results;
      this.attacker.collectionList = attackerCollection;
      this.defenser.collectionList = defenserCollection;
      _ref = this.attacker.collectionList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        card = _ref[_i];
        card.gs = this;
        card.player = this.attacker;
      }
      _ref1 = this.defenser.collectionList;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        card = _ref1[_j];
        card.gs = this;
        _results.push(card.player = this.defenser);
      }
      return _results;
    };
    gs.gameStart = function() {};
    gs.trigger = {};
    gs.listen = function(waiter, eventName) {
      if (this.trigger[eventName] == null) {
        this.trigger[eventName] = [];
      }
      return this.trigger[eventName].push(waiter);
    };
    gs.broadcast = function() {
      var args, eventName, waiter, _i, _len, _ref;
      eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((this.trigger[eventName] != null) === false) {
        return false;
      }
      _ref = this.trigger[eventName];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        waiter = _ref[_i];
        if (waiter[eventName].apply(waiter, args) === false) {
          return false;
        }
      }
      return true;
    };
    return gs;
  };

  console.log('\n**test**');

  gs = GameScene.createGameScene();

  a = cards.tCard.clone();

  b = cards.tCard.clone();

  t = book.card('tCard');

  gs.init([a, t], [b]);

  t.use(a);

  console.log(t.tags);

  t.startListen();

  gs.broadcast('whenDie', a);

  gs.broadcast('whenCall', a);

  console.log('load GameScene..');

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.GameScene = GameScene;

  gsTest = {};

  gsTest = GameScene.createGameScene();

  gs.init([a, b], []);

  p1 = gsTest.attacker;

  p2 = gsTest.defenser;

  root.gsTest = gsTest;

  root.p1 = p1;

  root.p2 = p2;

}).call(this);
