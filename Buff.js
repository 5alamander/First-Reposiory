// Generated by CoffeeScript 1.8.0
(function() {
  var Buff, root, s, t,
    __slice = [].slice;

  Buff = (function() {
    Buff.prototype.cost = 0;

    Buff.prototype.atk = 0;

    Buff.prototype.maxHp = 0;

    Buff.prototype.isSilence = false;

    Buff.prototype.owner = {
      removeBuff: function() {
        return console.log('temp remove');
      },
      gs: {
        listen: function() {
          return console.log('temp listen', {
            disListen: function() {
              return console.log('temp disListen');
            }
          });
        }
      }
    };

    Buff.prototype.lifeTime = 1;

    function Buff(initial) {
      var key, value;
      this.turnCount = 0;
      this.tags = [];
      for (key in initial) {
        value = initial[key];
        if (key.indexOf('when') === 0) {
          this.tags.push(key);
        }
        this.createBuffEffect(key, value);
      }
    }

    Buff.prototype.update = function(n) {
      this.lifeTime -= n;
      this.turnCount += n;
      if (!(this.lifeTime > 0)) {
        this.owner.removeBuff(this);
        return;
      }
      if (this.isSilence !== false) {
        return;
      }
      if (this.cost && this.owner.currentCost) {
        this.owner.currentCost += this.cost;
      }
      if (this.atk && this.owner.currentAtk) {
        this.owner.currentAtk += this.atk;
      }
      if (this.maxHp && this.owner.currentMaxHp) {
        this.owner.currentMaxHp += this.maxHp;
      }
      return typeof this.onUpdate === "function" ? this.onUpdate(n) : void 0;
    };

    Buff.prototype.activate = function() {
      var tag, _i, _len, _ref, _results;
      _ref = this.tags;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        _results.push(this.owner.gs.listen(this, tag));
      }
      return _results;
    };

    Buff.prototype.destroy = function() {
      var tag, _i, _len, _ref, _results;
      _ref = this.tags;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        _results.push(this.owner.gs.disListen(this, tag));
      }
      return _results;
    };

    Buff.prototype.createBuffEffect = function(key, func) {
      return this[key] = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (this.isSilence !== false) {
          return;
        }
        return func.call.apply(func, [this].concat(__slice.call(args)));
      };
    };

    return Buff;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Buff = Buff;

  t = new Buff({
    whenAdd: function() {
      return console.log('when add');
    }
  });

  s = new Buff;

  t.update(1);

  console.log(t.lifeTime);

  console.log(s.lifeTime);

  console.log(t);

  t.whenAdd(1, 2, 3);

  t.isSilence = true;

  t.whenAdd(1);

}).call(this);
